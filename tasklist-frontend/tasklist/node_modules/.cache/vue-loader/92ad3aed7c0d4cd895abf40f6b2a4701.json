{"remainingRequest":"C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\src\\views\\Dashboard.vue?vue&type=template&id=22ba47ca&%40list-update=list&","dependencies":[{"path":"C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\src\\views\\Dashboard.vue","mtime":1628694594695},{"path":"C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\guilhermeribeiro\\GitHub\\tasklist-full\\tasklist-frontend\\tasklist\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}